name: Code linting and testing

on: [push, pull_request]

jobs:
  Tests:

    runs-on: ubuntu-latest 
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        sudo apt-get install xvfb
        pip install coverage
        # pip install nbval
        # pip install nbsmoke
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Setup conda environment
      run: |
        # $CONDA is an environment variable pointing to the root of the miniconda directory
        # $CONDA/bin/conda env update --file environment.yml --name base
        # $CONDA/bin/pip install .
        $CONDA/bin/pip install pytest
        $CONDA/bin/pip install nbval
        
    - name: Display Python version
      if: ${{ always() }}    
      run: |
        python -c "import sys; print(sys.version); import skrf as rf; print(rf.__version__)"
        pwd
        PYTHONPATH=${PYTHONPATH}:${PWD}:${PWD}/skrf
        print $PYTHONPATH
        export PYTHONPATH

    # code quality check (linting)
    - name: Lint with flake8
      if: ${{ always() }}    
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # tests suites & creates coverage report
    - name: Test with nose
      if: ${{ always() }}    
      run: |
        nosetests skrf --nocapture --with-coverage -c nose.cfg
 
    - name: Run all notebooks with nbval via conda
      if: ${{ always() }}
      run: |
        $CONDA/bin/pytest -v --nbval-lax --current-env -p no:python

    - name: Run all notebooks with nbval via conda
      if: ${{ always() }}
      run: |
        $CONDA/bin/python -m pytest -v --nbval-lax --current-env -p no:python

    - name: Run tutorials notebooks with nbval via conda
      if: ${{ always() }}
      run: |
        $CONDA/bin/pytest -v --nbval-lax --current-env -p no:python doc/source/tutorials/

    - name: Run tutorials notebooks with nbsmoke
      if: ${{ always() }}
      run: |
        pytest --nbsmoke-run doc/source/tutorials/

    - name: Run tutorials notebooks with nbsmoke
      if: ${{ always() }}
      run: |
        python -m pytest --nbsmoke-run doc/source/tutorials/

    - name: Run examples notebooks with nbval
      if: ${{ always() }}    
      run: |
        python -m pytest --nbval-lax --current-env -p no:python --ignore=doc/source/examples/instrumentcontrol/ doc/source/examples/
        
    - name: Run tutorials notebooks with nbval
      if: ${{ always() }}    
      run: |
        python -m pytest --nbval-lax --current-env -p no:python doc/source/tutorials/

    # Upload coverage data to coveralls.io
    - name: Upload coverage data to coveralls.io
      if: ${{ always() }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_FLAG_NAME: ${{ matrix.test-name }}
        COVERALLS_PARALLEL: true
      run: |
        pip install coveralls    
        coveralls --service=github
  
  coveralls:
    name: Indicate completion to coveralls.io (Finish)
    if: ${{ always() }}
    needs: Tests
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
      - name: Finished
        run: |
          pip3 install --upgrade coveralls
          coveralls --finish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
